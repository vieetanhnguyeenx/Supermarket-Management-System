// <auto-generated />
using System;
using BusinessObject;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusinessObject.Migrations
{
    [DbContext(typeof(MyDBContext))]
    partial class MyDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BusinessObject.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Discontinued")
                        .HasColumnType("bit");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryID = 1,
                            CategoryName = "Beverages",
                            Description = "",
                            Discontinued = false
                        },
                        new
                        {
                            CategoryID = 2,
                            CategoryName = "Condiments",
                            Description = "",
                            Discontinued = false
                        },
                        new
                        {
                            CategoryID = 3,
                            CategoryName = "Confections",
                            Description = "",
                            Discontinued = false
                        },
                        new
                        {
                            CategoryID = 4,
                            CategoryName = "Dairy Products",
                            Description = "",
                            Discontinued = false
                        },
                        new
                        {
                            CategoryID = 5,
                            CategoryName = "Grains/Cereals",
                            Description = "",
                            Discontinued = false
                        },
                        new
                        {
                            CategoryID = 6,
                            CategoryName = "Meat/Poultry",
                            Description = "",
                            Discontinued = false
                        },
                        new
                        {
                            CategoryID = 7,
                            CategoryName = "Produce",
                            Description = "",
                            Discontinued = false
                        },
                        new
                        {
                            CategoryID = 8,
                            CategoryName = "Seafood",
                            Description = "",
                            Discontinued = false
                        });
                });

            modelBuilder.Entity("BusinessObject.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerID"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<int>("Point")
                        .HasColumnType("int");

                    b.HasKey("CustomerID");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerID = 1,
                            Address = "123 Main St",
                            FirstName = "John",
                            LastName = "Doe",
                            Phone = "1234567890",
                            Point = 100
                        },
                        new
                        {
                            CustomerID = 2,
                            Address = "456 Elm St",
                            FirstName = "Jane",
                            LastName = "Smith",
                            Phone = "4567890123",
                            Point = 150
                        },
                        new
                        {
                            CustomerID = 3,
                            Address = "789 Oak St",
                            FirstName = "Michael",
                            LastName = "Johnson",
                            Phone = "7890123456",
                            Point = 200
                        },
                        new
                        {
                            CustomerID = 4,
                            Address = "321 Maple St",
                            FirstName = "Emily",
                            LastName = "Williams",
                            Phone = "3216540987",
                            Point = 120
                        },
                        new
                        {
                            CustomerID = 5,
                            Address = "654 Pine St",
                            FirstName = "Chris",
                            LastName = "Brown",
                            Phone = "6549873210",
                            Point = 180
                        },
                        new
                        {
                            CustomerID = 6,
                            Address = "987 Cedar St",
                            FirstName = "Jessica",
                            LastName = "Jones",
                            Phone = "9873216540",
                            Point = 90
                        },
                        new
                        {
                            CustomerID = 7,
                            Address = "234 Birch St",
                            FirstName = "David",
                            LastName = "Davis",
                            Phone = "2345678901",
                            Point = 250
                        },
                        new
                        {
                            CustomerID = 8,
                            Address = "567 Walnut St",
                            FirstName = "Sarah",
                            LastName = "Miller",
                            Phone = "5678901234",
                            Point = 300
                        },
                        new
                        {
                            CustomerID = 9,
                            Address = "890 Ash St",
                            FirstName = "Ryan",
                            LastName = "Wilson",
                            Phone = "8901234567",
                            Point = 150
                        },
                        new
                        {
                            CustomerID = 10,
                            Address = "432 Spruce St",
                            FirstName = "Laura",
                            LastName = "Moore",
                            Phone = "4327651098",
                            Point = 170
                        });
                });

            modelBuilder.Entity("BusinessObject.Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Discontinued")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DoB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Inventory", b =>
                {
                    b.Property<int>("InventoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InventoryID"), 1L, 1);

                    b.Property<bool>("Discontinued")
                        .HasColumnType("bit");

                    b.Property<string>("EmployeeID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("InventoryID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("ProductID");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("BusinessObject.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductID"), 1L, 1);

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Discontinued")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("SupplierID")
                        .HasColumnType("int");

                    b.Property<int>("TotalQuantity")
                        .HasColumnType("int");

                    b.HasKey("ProductID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("SupplierID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductID = 1,
                            CategoryID = 1,
                            Description = "Description of Product 1",
                            Discontinued = false,
                            Price = 10.99m,
                            ProductName = "Product 1",
                            SupplierID = 1,
                            TotalQuantity = 100
                        },
                        new
                        {
                            ProductID = 2,
                            CategoryID = 2,
                            Description = "Description of Product 2",
                            Discontinued = false,
                            Price = 20.50m,
                            ProductName = "Product 2",
                            SupplierID = 2,
                            TotalQuantity = 150
                        },
                        new
                        {
                            ProductID = 3,
                            CategoryID = 1,
                            Description = "Description of Product 3",
                            Discontinued = false,
                            Price = 15.75m,
                            ProductName = "Product 3",
                            SupplierID = 3,
                            TotalQuantity = 200
                        },
                        new
                        {
                            ProductID = 4,
                            CategoryID = 3,
                            Description = "Description of Product 4",
                            Discontinued = false,
                            Price = 25.00m,
                            ProductName = "Product 4",
                            SupplierID = 4,
                            TotalQuantity = 120
                        },
                        new
                        {
                            ProductID = 5,
                            CategoryID = 2,
                            Description = "Description of Product 5",
                            Discontinued = false,
                            Price = 18.25m,
                            ProductName = "Product 5",
                            SupplierID = 5,
                            TotalQuantity = 180
                        },
                        new
                        {
                            ProductID = 6,
                            CategoryID = 3,
                            Description = "Description of Product 6",
                            Discontinued = false,
                            Price = 30.75m,
                            ProductName = "Product 6",
                            SupplierID = 6,
                            TotalQuantity = 90
                        },
                        new
                        {
                            ProductID = 7,
                            CategoryID = 1,
                            Description = "Description of Product 7",
                            Discontinued = false,
                            Price = 22.99m,
                            ProductName = "Product 7",
                            SupplierID = 7,
                            TotalQuantity = 250
                        },
                        new
                        {
                            ProductID = 8,
                            CategoryID = 2,
                            Description = "Description of Product 8",
                            Discontinued = false,
                            Price = 12.50m,
                            ProductName = "Product 8",
                            SupplierID = 8,
                            TotalQuantity = 300
                        },
                        new
                        {
                            ProductID = 9,
                            CategoryID = 3,
                            Description = "Description of Product 9",
                            Discontinued = false,
                            Price = 28.00m,
                            ProductName = "Product 9",
                            SupplierID = 9,
                            TotalQuantity = 150
                        },
                        new
                        {
                            ProductID = 10,
                            CategoryID = 1,
                            Description = "Description of Product 10",
                            Discontinued = false,
                            Price = 17.99m,
                            ProductName = "Product 10",
                            SupplierID = 10,
                            TotalQuantity = 170
                        });
                });

            modelBuilder.Entity("BusinessObject.SalesTransaction", b =>
                {
                    b.Property<int>("TransactionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionID"), 1L, 1);

                    b.Property<int>("CashReceived")
                        .HasColumnType("int");

                    b.Property<int>("Change")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerID")
                        .HasColumnType("int");

                    b.Property<bool>("Discontinued")
                        .HasColumnType("bit");

                    b.Property<string>("EmployeeID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TransactionDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.HasKey("TransactionID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("SalesTransactions");
                });

            modelBuilder.Entity("BusinessObject.Supplier", b =>
                {
                    b.Property<int>("SupplierID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierID"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<bool>("Discontinued")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("SupplierID");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            SupplierID = 1,
                            Address = "123 Main St",
                            CompanyName = "ABC Company",
                            Discontinued = false,
                            Phone = "1234567890"
                        },
                        new
                        {
                            SupplierID = 2,
                            Address = "456 Elm St",
                            CompanyName = "XYZ Corporation",
                            Discontinued = false,
                            Phone = "4567890123"
                        },
                        new
                        {
                            SupplierID = 3,
                            Address = "789 Oak St",
                            CompanyName = "LMN Enterprises",
                            Discontinued = false,
                            Phone = "7890123456"
                        },
                        new
                        {
                            SupplierID = 4,
                            Address = "321 Maple St",
                            CompanyName = "PQR Inc.",
                            Discontinued = false,
                            Phone = "3216540987"
                        },
                        new
                        {
                            SupplierID = 5,
                            Address = "654 Pine St",
                            CompanyName = "EFG Ltd.",
                            Discontinued = false,
                            Phone = "6549873210"
                        },
                        new
                        {
                            SupplierID = 6,
                            Address = "987 Cedar St",
                            CompanyName = "HIJ Co.",
                            Discontinued = false,
                            Phone = "9873216540"
                        },
                        new
                        {
                            SupplierID = 7,
                            Address = "234 Birch St",
                            CompanyName = "RST Industries",
                            Discontinued = false,
                            Phone = "2345678901"
                        },
                        new
                        {
                            SupplierID = 8,
                            Address = "567 Walnut St",
                            CompanyName = "UVW Group",
                            Discontinued = false,
                            Phone = "5678901234"
                        },
                        new
                        {
                            SupplierID = 9,
                            Address = "890 Ash St",
                            CompanyName = "MNO Limited",
                            Discontinued = false,
                            Phone = "8901234567"
                        },
                        new
                        {
                            SupplierID = 10,
                            Address = "432 Spruce St",
                            CompanyName = "QRS Enterprises",
                            Discontinued = false,
                            Phone = "4327651098"
                        });
                });

            modelBuilder.Entity("BusinessObject.TransactionDetail", b =>
                {
                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("TransactionID")
                        .HasColumnType("int");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("UnitPrice")
                        .HasColumnType("int");

                    b.HasKey("ProductID", "TransactionID");

                    b.HasIndex("TransactionID");

                    b.ToTable("TransactionDetails");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Inventory", b =>
                {
                    b.HasOne("BusinessObject.Employee", "Employee")
                        .WithMany("Inventories")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Product", "Product")
                        .WithMany("Inventories")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BusinessObject.Product", b =>
                {
                    b.HasOne("BusinessObject.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("BusinessObject.SalesTransaction", b =>
                {
                    b.HasOne("BusinessObject.Customer", "Customer")
                        .WithMany("SalesTransactions")
                        .HasForeignKey("CustomerID");

                    b.HasOne("BusinessObject.Employee", "Employee")
                        .WithMany("SalesTransactions")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("BusinessObject.TransactionDetail", b =>
                {
                    b.HasOne("BusinessObject.Product", "Product")
                        .WithMany("TransactionDetails")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.SalesTransaction", "Transaction")
                        .WithMany("TransactionDetails")
                        .HasForeignKey("TransactionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BusinessObject.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BusinessObject.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BusinessObject.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BusinessObject.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("BusinessObject.Customer", b =>
                {
                    b.Navigation("SalesTransactions");
                });

            modelBuilder.Entity("BusinessObject.Employee", b =>
                {
                    b.Navigation("Inventories");

                    b.Navigation("SalesTransactions");
                });

            modelBuilder.Entity("BusinessObject.Product", b =>
                {
                    b.Navigation("Inventories");

                    b.Navigation("TransactionDetails");
                });

            modelBuilder.Entity("BusinessObject.SalesTransaction", b =>
                {
                    b.Navigation("TransactionDetails");
                });

            modelBuilder.Entity("BusinessObject.Supplier", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
